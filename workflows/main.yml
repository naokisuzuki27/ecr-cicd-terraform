name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]  # mainブランチにプッシュされた時に実行

env:
  AWS_REGION: ap-northeast-1                   # AWSリージョン（必要に応じて変更してください）
  ECR_REPOSITORY: basis/nextjs-app                  # ECRリポジトリ名
  ECS_SERVICE: basis-app-service                  # ECSサービス名
  ECS_CLUSTER: ecs-test-dev-cluster                  # ECSクラスター名
  ECS_TASK_DEFINITION: task-definition.json    # タスク定義ファイル
  CONTAINER_NAME: my-container                 # コンテナ名（タスク定義内のコンテナ名と一致させる）

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write   # GitHub OIDCプロバイダー認証に必要

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::<AWS_ACCOUNT_ID>:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Dockerイメージをビルド
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          # ECRにプッシュ
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # 次のステップで使用するイメージURIを設定
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true